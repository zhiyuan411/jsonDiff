[Global]
# 对比模式,支持: query:输入文件文件为url,将请求这些url的结果做对比; jsondata:输入文件为每行1个json字符串,直接做对比
MODE = query

# 输入输出数据的存储目录
DATA_PATH = ./data/
# 差异文件的html结果的合并文本
HTML_SUM_FILE = diffResult_Sum.html

# 该阀值决定处理多少条URL请求或Json数据,-1为全部请求不设限
MAX_COUNT_TO_PROCESS = 500

# 绝对路径表示的ignore集合,以分号';'分割;对性能几乎无影响
ABSOLUTE_IGNORE =
# 相对路径表示的ignore集合(正则形式),以分号';'分割;随着输入个数的增加,性能成线性下降
RELACTIVE_IGNORE =
# 要忽略的value的集合(正则形式),以分号';'分割;随着输入个数的增加,性能成线性下降
VALUE_IGNORE = strValue211;strValue222
# 是否需要无需比较数组,true或false;开启后性能下降,性能下降幅度取决于无序的结果个数和验证失败的个数,且随着数组的层级上升成n^2比例下降
IS_DISORDER_ARRAY = false
# 为false时只验证期望是否是实际的子集;为true时验证期望和实际为相等集;对性能几乎无影响
IS_FULL_COMPARE = true
# 是否对值为引用的情况进行解析并展开,true或false;开启后性能验证下降,建议仅对失败的结果使用该选项复查
ANALYZE_REFERENCE = false

# [输出文件]保存差异结果的文件
DIFF_RESULTS_FILE = diff_results.txt
# [输出文件]保存异常结果的文件
EXCEPTION_RESULTS_FILE = exception_results.txt

[QueryDiff]
# 做请求对比的2台机器的机器名
HOSTNAME_1 = http://www.baidu.com
HOSTNAME_2 = http://www.baidu.com

# 请求限速配置,单位是秒(s),如果设置为毫秒,例如:20毫秒,则设置为:0.02,表示每个请求后sleep 0.02s,即qps<1/0.02=50,设置为0表示不限速
SLEEP_TIME = 0
# 请求的url必须含有以下中的至少1个关键字,才会被使用,多个关键字以分号';'分割,为空则使用所有的url
URL_FILTER_WORDS =
# 请求的url如果含有以下任意1个关键字则被过滤,多个关键字以分号';'分割
URL_IGNORE_WORDS = favicon.ico

# [输入文件]http请求接口的文件,该文件中的每一行与Hosts中的配置拼接成一个完整的URL请求
REQUEST_FILE = url.txt
# [输出文件]保存结果一致的URL
SAME_RESULT_URLS = same_result_urls.txt
# [输出文件]保存结果不一致的URL,该文件可以用于执行重试
RETRY_URLS = retry_urls.txt
# [输出文件]保存结果出异常的URL
EXCEPTION_URLS = exception_urls.txt
# [输出文件]保存被跳过的URL
SKIPPED_URLS = skipped_urls.txt

[JsonDataDiff]
# [输入文件]每行1个json字符串,2个文件的同行的json串会进行对比
JSON_DATA_FILE_1 = json1.txt
JSON_DATA_FILE_2 = json2.txt
# [输出文件]保存结果不一致的JSON串,该文件可以用于执行重试
RETRY_JSON_DATA_1 = retry_json_data_1.txt
RETRY_JSON_DATA_2 = retry_json_data_2.txt
# [输出文件]保存结果出异常的JSON串
EXCEPTION_JSON_DATA_1 = exception_json_data_1.txt
EXCEPTION_JSON_DATA_2 = exception_json_data_2.txt


